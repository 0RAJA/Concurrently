package main

/*
	排队模式的使用：
		channel入口处
		在这个stage中批量操作可以带来更高的效率
	通过足够的取样可以预测channel的需求率，这被称为利特尔法则。
	L = a * W (只可以在稳定的系统中，入口的速率等于负载退出的速率)
		L=系统中的平均负载数
		a=负载的平均到达率
 		W=负载在系统中所花费的平均时间
	所以增加队列是在增加L,或者说是增加了负载a的平均到达率或增加了一个负载在系统中花费的平均时间
	因为我们在观察整个channel，所以你的channel只会和最慢的stage一样慢
	所以：L = a * Wi

	具体分析：
	假设有3个stage,一个请求需要1s才可以通过流水线,将L设置为3,因为每个stage都在处理请求，我们将W设置为1s.
		3(r) = a(r/s) * 1(s)
		a = 3(r/s)
	所以我们每秒可以处理3个请求

	假设请求需要1ms来处理，队列需要每秒处理100000次请求。同样有3个stage
		L(r)-3(r) = 100000(r/s) * 0.0001(s)
		L(r)-3(r) = 10(r)
		L(r) = 7(r)
	所以我们需要容量为7的channel
*/

func main() {
}
